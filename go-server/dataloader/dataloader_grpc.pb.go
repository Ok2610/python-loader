// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: dataloader.proto

package dataloader

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataLoader_GetMedias_FullMethodName           = "/dataloader.DataLoader/getMedias"
	DataLoader_GetMediaById_FullMethodName        = "/dataloader.DataLoader/getMediaById"
	DataLoader_GetMediaByURI_FullMethodName       = "/dataloader.DataLoader/getMediaByURI"
	DataLoader_CreateMedia_FullMethodName         = "/dataloader.DataLoader/createMedia"
	DataLoader_CreateMediaStream_FullMethodName   = "/dataloader.DataLoader/createMediaStream"
	DataLoader_DeleteMedia_FullMethodName         = "/dataloader.DataLoader/deleteMedia"
	DataLoader_GetTagSets_FullMethodName          = "/dataloader.DataLoader/getTagSets"
	DataLoader_GetTagSetById_FullMethodName       = "/dataloader.DataLoader/getTagSetById"
	DataLoader_GetTagSetByName_FullMethodName     = "/dataloader.DataLoader/getTagSetByName"
	DataLoader_CreateTagSet_FullMethodName        = "/dataloader.DataLoader/createTagSet"
	DataLoader_GetTags_FullMethodName             = "/dataloader.DataLoader/getTags"
	DataLoader_GetTag_FullMethodName              = "/dataloader.DataLoader/getTag"
	DataLoader_CreateTag_FullMethodName           = "/dataloader.DataLoader/createTag"
	DataLoader_CreateTagStream_FullMethodName     = "/dataloader.DataLoader/createTagStream"
	DataLoader_GetTaggings_FullMethodName         = "/dataloader.DataLoader/getTaggings"
	DataLoader_GetMediasWithTag_FullMethodName    = "/dataloader.DataLoader/getMediasWithTag"
	DataLoader_GetMediaTags_FullMethodName        = "/dataloader.DataLoader/getMediaTags"
	DataLoader_CreateTagging_FullMethodName       = "/dataloader.DataLoader/createTagging"
	DataLoader_CreateTaggingStream_FullMethodName = "/dataloader.DataLoader/createTaggingStream"
	DataLoader_GetHierarchies_FullMethodName      = "/dataloader.DataLoader/getHierarchies"
	DataLoader_GetHierarchy_FullMethodName        = "/dataloader.DataLoader/getHierarchy"
	DataLoader_CreateHierarchy_FullMethodName     = "/dataloader.DataLoader/createHierarchy"
	DataLoader_GetNodes_FullMethodName            = "/dataloader.DataLoader/getNodes"
	DataLoader_GetNode_FullMethodName             = "/dataloader.DataLoader/getNode"
	DataLoader_GetChildNodes_FullMethodName       = "/dataloader.DataLoader/getChildNodes"
	DataLoader_CreateNode_FullMethodName          = "/dataloader.DataLoader/createNode"
	DataLoader_CreateNodeStream_FullMethodName    = "/dataloader.DataLoader/createNodeStream"
	DataLoader_DeleteNode_FullMethodName          = "/dataloader.DataLoader/deleteNode"
	DataLoader_GetCell_FullMethodName             = "/dataloader.DataLoader/getCell"
	DataLoader_ResetDatabase_FullMethodName       = "/dataloader.DataLoader/resetDatabase"
)

// DataLoaderClient is the client API for DataLoader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataLoaderClient interface {
	// -------------------------- Medias
	GetMedias(ctx context.Context, in *GetMediasRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MediaResponse], error)
	GetMediaById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*MediaResponse, error)
	GetMediaByURI(ctx context.Context, in *GetMediaByURIRequest, opts ...grpc.CallOption) (*MediaResponse, error)
	CreateMedia(ctx context.Context, in *CreateMediaRequest, opts ...grpc.CallOption) (*MediaResponse, error)
	CreateMediaStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CreateMediaRequest, CreateMediaStreamResponse], error)
	// Create multiple medias at the same time in batches, returns amount added/error messages when a batch is added
	DeleteMedia(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// -------------------------- TagSets
	GetTagSets(ctx context.Context, in *GetTagSetsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TagSetResponse], error)
	GetTagSetById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*TagSetResponse, error)
	GetTagSetByName(ctx context.Context, in *GetTagSetRequestByName, opts ...grpc.CallOption) (*TagSetResponse, error)
	CreateTagSet(ctx context.Context, in *CreateTagSetRequest, opts ...grpc.CallOption) (*TagSetResponse, error)
	// -------------------------- Tags
	GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TagResponse], error)
	GetTag(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*TagResponse, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	CreateTagStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CreateTagStreamRequest, CreateTagStreamResponse], error)
	// -------------------------- Taggings
	GetTaggings(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaggingResponse], error)
	GetMediasWithTag(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*RepeatedIdResponse, error)
	GetMediaTags(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*RepeatedIdResponse, error)
	CreateTagging(ctx context.Context, in *CreateTaggingRequest, opts ...grpc.CallOption) (*TaggingResponse, error)
	CreateTaggingStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CreateTaggingRequest, CreateTaggingStreamResponse], error)
	// -------------------------- Hierarchies
	GetHierarchies(ctx context.Context, in *GetHierarchiesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HierarchyResponse], error)
	GetHierarchy(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*HierarchyResponse, error)
	CreateHierarchy(ctx context.Context, in *CreateHierarchyRequest, opts ...grpc.CallOption) (*HierarchyResponse, error)
	// -------------------------- Nodes
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NodeResponse], error)
	GetNode(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	GetChildNodes(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChildNodeResponse], error)
	CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	CreateNodeStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CreateNodeRequest, NodeResponse], error)
	DeleteNode(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// -------------------------- Cell
	GetCell(ctx context.Context, in *GetCellRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CellResponse], error)
	// Other
	ResetDatabase(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type dataLoaderClient struct {
	cc grpc.ClientConnInterface
}

func NewDataLoaderClient(cc grpc.ClientConnInterface) DataLoaderClient {
	return &dataLoaderClient{cc}
}

func (c *dataLoaderClient) GetMedias(ctx context.Context, in *GetMediasRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MediaResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[0], DataLoader_GetMedias_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetMediasRequest, MediaResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_GetMediasClient = grpc.ServerStreamingClient[MediaResponse]

func (c *dataLoaderClient) GetMediaById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*MediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MediaResponse)
	err := c.cc.Invoke(ctx, DataLoader_GetMediaById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) GetMediaByURI(ctx context.Context, in *GetMediaByURIRequest, opts ...grpc.CallOption) (*MediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MediaResponse)
	err := c.cc.Invoke(ctx, DataLoader_GetMediaByURI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateMedia(ctx context.Context, in *CreateMediaRequest, opts ...grpc.CallOption) (*MediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MediaResponse)
	err := c.cc.Invoke(ctx, DataLoader_CreateMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateMediaStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CreateMediaRequest, CreateMediaStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[1], DataLoader_CreateMediaStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateMediaRequest, CreateMediaStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_CreateMediaStreamClient = grpc.BidiStreamingClient[CreateMediaRequest, CreateMediaStreamResponse]

func (c *dataLoaderClient) DeleteMedia(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, DataLoader_DeleteMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) GetTagSets(ctx context.Context, in *GetTagSetsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TagSetResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[2], DataLoader_GetTagSets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTagSetsRequest, TagSetResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_GetTagSetsClient = grpc.ServerStreamingClient[TagSetResponse]

func (c *dataLoaderClient) GetTagSetById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*TagSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagSetResponse)
	err := c.cc.Invoke(ctx, DataLoader_GetTagSetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) GetTagSetByName(ctx context.Context, in *GetTagSetRequestByName, opts ...grpc.CallOption) (*TagSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagSetResponse)
	err := c.cc.Invoke(ctx, DataLoader_GetTagSetByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateTagSet(ctx context.Context, in *CreateTagSetRequest, opts ...grpc.CallOption) (*TagSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagSetResponse)
	err := c.cc.Invoke(ctx, DataLoader_CreateTagSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TagResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[3], DataLoader_GetTags_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTagsRequest, TagResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_GetTagsClient = grpc.ServerStreamingClient[TagResponse]

func (c *dataLoaderClient) GetTag(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, DataLoader_GetTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, DataLoader_CreateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateTagStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CreateTagStreamRequest, CreateTagStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[4], DataLoader_CreateTagStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateTagStreamRequest, CreateTagStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_CreateTagStreamClient = grpc.BidiStreamingClient[CreateTagStreamRequest, CreateTagStreamResponse]

func (c *dataLoaderClient) GetTaggings(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaggingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[5], DataLoader_GetTaggings_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EmptyRequest, TaggingResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_GetTaggingsClient = grpc.ServerStreamingClient[TaggingResponse]

func (c *dataLoaderClient) GetMediasWithTag(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*RepeatedIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepeatedIdResponse)
	err := c.cc.Invoke(ctx, DataLoader_GetMediasWithTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) GetMediaTags(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*RepeatedIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepeatedIdResponse)
	err := c.cc.Invoke(ctx, DataLoader_GetMediaTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateTagging(ctx context.Context, in *CreateTaggingRequest, opts ...grpc.CallOption) (*TaggingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaggingResponse)
	err := c.cc.Invoke(ctx, DataLoader_CreateTagging_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateTaggingStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CreateTaggingRequest, CreateTaggingStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[6], DataLoader_CreateTaggingStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateTaggingRequest, CreateTaggingStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_CreateTaggingStreamClient = grpc.BidiStreamingClient[CreateTaggingRequest, CreateTaggingStreamResponse]

func (c *dataLoaderClient) GetHierarchies(ctx context.Context, in *GetHierarchiesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HierarchyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[7], DataLoader_GetHierarchies_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetHierarchiesRequest, HierarchyResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_GetHierarchiesClient = grpc.ServerStreamingClient[HierarchyResponse]

func (c *dataLoaderClient) GetHierarchy(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*HierarchyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HierarchyResponse)
	err := c.cc.Invoke(ctx, DataLoader_GetHierarchy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateHierarchy(ctx context.Context, in *CreateHierarchyRequest, opts ...grpc.CallOption) (*HierarchyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HierarchyResponse)
	err := c.cc.Invoke(ctx, DataLoader_CreateHierarchy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NodeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[8], DataLoader_GetNodes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetNodesRequest, NodeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_GetNodesClient = grpc.ServerStreamingClient[NodeResponse]

func (c *dataLoaderClient) GetNode(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, DataLoader_GetNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) GetChildNodes(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChildNodeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[9], DataLoader_GetChildNodes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[IdRequest, ChildNodeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_GetChildNodesClient = grpc.ServerStreamingClient[ChildNodeResponse]

func (c *dataLoaderClient) CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, DataLoader_CreateNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateNodeStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CreateNodeRequest, NodeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[10], DataLoader_CreateNodeStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateNodeRequest, NodeResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_CreateNodeStreamClient = grpc.BidiStreamingClient[CreateNodeRequest, NodeResponse]

func (c *dataLoaderClient) DeleteNode(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, DataLoader_DeleteNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) GetCell(ctx context.Context, in *GetCellRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CellResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[11], DataLoader_GetCell_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetCellRequest, CellResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_GetCellClient = grpc.ServerStreamingClient[CellResponse]

func (c *dataLoaderClient) ResetDatabase(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, DataLoader_ResetDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataLoaderServer is the server API for DataLoader service.
// All implementations must embed UnimplementedDataLoaderServer
// for forward compatibility.
type DataLoaderServer interface {
	// -------------------------- Medias
	GetMedias(*GetMediasRequest, grpc.ServerStreamingServer[MediaResponse]) error
	GetMediaById(context.Context, *IdRequest) (*MediaResponse, error)
	GetMediaByURI(context.Context, *GetMediaByURIRequest) (*MediaResponse, error)
	CreateMedia(context.Context, *CreateMediaRequest) (*MediaResponse, error)
	CreateMediaStream(grpc.BidiStreamingServer[CreateMediaRequest, CreateMediaStreamResponse]) error
	// Create multiple medias at the same time in batches, returns amount added/error messages when a batch is added
	DeleteMedia(context.Context, *IdRequest) (*StatusResponse, error)
	// -------------------------- TagSets
	GetTagSets(*GetTagSetsRequest, grpc.ServerStreamingServer[TagSetResponse]) error
	GetTagSetById(context.Context, *IdRequest) (*TagSetResponse, error)
	GetTagSetByName(context.Context, *GetTagSetRequestByName) (*TagSetResponse, error)
	CreateTagSet(context.Context, *CreateTagSetRequest) (*TagSetResponse, error)
	// -------------------------- Tags
	GetTags(*GetTagsRequest, grpc.ServerStreamingServer[TagResponse]) error
	GetTag(context.Context, *IdRequest) (*TagResponse, error)
	CreateTag(context.Context, *CreateTagRequest) (*TagResponse, error)
	CreateTagStream(grpc.BidiStreamingServer[CreateTagStreamRequest, CreateTagStreamResponse]) error
	// -------------------------- Taggings
	GetTaggings(*EmptyRequest, grpc.ServerStreamingServer[TaggingResponse]) error
	GetMediasWithTag(context.Context, *IdRequest) (*RepeatedIdResponse, error)
	GetMediaTags(context.Context, *IdRequest) (*RepeatedIdResponse, error)
	CreateTagging(context.Context, *CreateTaggingRequest) (*TaggingResponse, error)
	CreateTaggingStream(grpc.BidiStreamingServer[CreateTaggingRequest, CreateTaggingStreamResponse]) error
	// -------------------------- Hierarchies
	GetHierarchies(*GetHierarchiesRequest, grpc.ServerStreamingServer[HierarchyResponse]) error
	GetHierarchy(context.Context, *IdRequest) (*HierarchyResponse, error)
	CreateHierarchy(context.Context, *CreateHierarchyRequest) (*HierarchyResponse, error)
	// -------------------------- Nodes
	GetNodes(*GetNodesRequest, grpc.ServerStreamingServer[NodeResponse]) error
	GetNode(context.Context, *IdRequest) (*NodeResponse, error)
	GetChildNodes(*IdRequest, grpc.ServerStreamingServer[ChildNodeResponse]) error
	CreateNode(context.Context, *CreateNodeRequest) (*NodeResponse, error)
	CreateNodeStream(grpc.BidiStreamingServer[CreateNodeRequest, NodeResponse]) error
	DeleteNode(context.Context, *IdRequest) (*StatusResponse, error)
	// -------------------------- Cell
	GetCell(*GetCellRequest, grpc.ServerStreamingServer[CellResponse]) error
	// Other
	ResetDatabase(context.Context, *EmptyRequest) (*StatusResponse, error)
	mustEmbedUnimplementedDataLoaderServer()
}

// UnimplementedDataLoaderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataLoaderServer struct{}

func (UnimplementedDataLoaderServer) GetMedias(*GetMediasRequest, grpc.ServerStreamingServer[MediaResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetMedias not implemented")
}
func (UnimplementedDataLoaderServer) GetMediaById(context.Context, *IdRequest) (*MediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaById not implemented")
}
func (UnimplementedDataLoaderServer) GetMediaByURI(context.Context, *GetMediaByURIRequest) (*MediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaByURI not implemented")
}
func (UnimplementedDataLoaderServer) CreateMedia(context.Context, *CreateMediaRequest) (*MediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedia not implemented")
}
func (UnimplementedDataLoaderServer) CreateMediaStream(grpc.BidiStreamingServer[CreateMediaRequest, CreateMediaStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateMediaStream not implemented")
}
func (UnimplementedDataLoaderServer) DeleteMedia(context.Context, *IdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedia not implemented")
}
func (UnimplementedDataLoaderServer) GetTagSets(*GetTagSetsRequest, grpc.ServerStreamingServer[TagSetResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTagSets not implemented")
}
func (UnimplementedDataLoaderServer) GetTagSetById(context.Context, *IdRequest) (*TagSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagSetById not implemented")
}
func (UnimplementedDataLoaderServer) GetTagSetByName(context.Context, *GetTagSetRequestByName) (*TagSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagSetByName not implemented")
}
func (UnimplementedDataLoaderServer) CreateTagSet(context.Context, *CreateTagSetRequest) (*TagSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTagSet not implemented")
}
func (UnimplementedDataLoaderServer) GetTags(*GetTagsRequest, grpc.ServerStreamingServer[TagResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedDataLoaderServer) GetTag(context.Context, *IdRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (UnimplementedDataLoaderServer) CreateTag(context.Context, *CreateTagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedDataLoaderServer) CreateTagStream(grpc.BidiStreamingServer[CreateTagStreamRequest, CreateTagStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateTagStream not implemented")
}
func (UnimplementedDataLoaderServer) GetTaggings(*EmptyRequest, grpc.ServerStreamingServer[TaggingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTaggings not implemented")
}
func (UnimplementedDataLoaderServer) GetMediasWithTag(context.Context, *IdRequest) (*RepeatedIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediasWithTag not implemented")
}
func (UnimplementedDataLoaderServer) GetMediaTags(context.Context, *IdRequest) (*RepeatedIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaTags not implemented")
}
func (UnimplementedDataLoaderServer) CreateTagging(context.Context, *CreateTaggingRequest) (*TaggingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTagging not implemented")
}
func (UnimplementedDataLoaderServer) CreateTaggingStream(grpc.BidiStreamingServer[CreateTaggingRequest, CreateTaggingStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateTaggingStream not implemented")
}
func (UnimplementedDataLoaderServer) GetHierarchies(*GetHierarchiesRequest, grpc.ServerStreamingServer[HierarchyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetHierarchies not implemented")
}
func (UnimplementedDataLoaderServer) GetHierarchy(context.Context, *IdRequest) (*HierarchyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHierarchy not implemented")
}
func (UnimplementedDataLoaderServer) CreateHierarchy(context.Context, *CreateHierarchyRequest) (*HierarchyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHierarchy not implemented")
}
func (UnimplementedDataLoaderServer) GetNodes(*GetNodesRequest, grpc.ServerStreamingServer[NodeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedDataLoaderServer) GetNode(context.Context, *IdRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedDataLoaderServer) GetChildNodes(*IdRequest, grpc.ServerStreamingServer[ChildNodeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetChildNodes not implemented")
}
func (UnimplementedDataLoaderServer) CreateNode(context.Context, *CreateNodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (UnimplementedDataLoaderServer) CreateNodeStream(grpc.BidiStreamingServer[CreateNodeRequest, NodeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateNodeStream not implemented")
}
func (UnimplementedDataLoaderServer) DeleteNode(context.Context, *IdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedDataLoaderServer) GetCell(*GetCellRequest, grpc.ServerStreamingServer[CellResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetCell not implemented")
}
func (UnimplementedDataLoaderServer) ResetDatabase(context.Context, *EmptyRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetDatabase not implemented")
}
func (UnimplementedDataLoaderServer) mustEmbedUnimplementedDataLoaderServer() {}
func (UnimplementedDataLoaderServer) testEmbeddedByValue()                    {}

// UnsafeDataLoaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataLoaderServer will
// result in compilation errors.
type UnsafeDataLoaderServer interface {
	mustEmbedUnimplementedDataLoaderServer()
}

func RegisterDataLoaderServer(s grpc.ServiceRegistrar, srv DataLoaderServer) {
	// If the following call pancis, it indicates UnimplementedDataLoaderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataLoader_ServiceDesc, srv)
}

func _DataLoader_GetMedias_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMediasRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataLoaderServer).GetMedias(m, &grpc.GenericServerStream[GetMediasRequest, MediaResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_GetMediasServer = grpc.ServerStreamingServer[MediaResponse]

func _DataLoader_GetMediaById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetMediaById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_GetMediaById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetMediaById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_GetMediaByURI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaByURIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetMediaByURI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_GetMediaByURI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetMediaByURI(ctx, req.(*GetMediaByURIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).CreateMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_CreateMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).CreateMedia(ctx, req.(*CreateMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateMediaStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataLoaderServer).CreateMediaStream(&grpc.GenericServerStream[CreateMediaRequest, CreateMediaStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_CreateMediaStreamServer = grpc.BidiStreamingServer[CreateMediaRequest, CreateMediaStreamResponse]

func _DataLoader_DeleteMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).DeleteMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_DeleteMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).DeleteMedia(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_GetTagSets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTagSetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataLoaderServer).GetTagSets(m, &grpc.GenericServerStream[GetTagSetsRequest, TagSetResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_GetTagSetsServer = grpc.ServerStreamingServer[TagSetResponse]

func _DataLoader_GetTagSetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetTagSetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_GetTagSetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetTagSetById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_GetTagSetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagSetRequestByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetTagSetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_GetTagSetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetTagSetByName(ctx, req.(*GetTagSetRequestByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateTagSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).CreateTagSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_CreateTagSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).CreateTagSet(ctx, req.(*CreateTagSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_GetTags_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTagsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataLoaderServer).GetTags(m, &grpc.GenericServerStream[GetTagsRequest, TagResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_GetTagsServer = grpc.ServerStreamingServer[TagResponse]

func _DataLoader_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_GetTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetTag(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateTagStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataLoaderServer).CreateTagStream(&grpc.GenericServerStream[CreateTagStreamRequest, CreateTagStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_CreateTagStreamServer = grpc.BidiStreamingServer[CreateTagStreamRequest, CreateTagStreamResponse]

func _DataLoader_GetTaggings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataLoaderServer).GetTaggings(m, &grpc.GenericServerStream[EmptyRequest, TaggingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_GetTaggingsServer = grpc.ServerStreamingServer[TaggingResponse]

func _DataLoader_GetMediasWithTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetMediasWithTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_GetMediasWithTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetMediasWithTag(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_GetMediaTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetMediaTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_GetMediaTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetMediaTags(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateTagging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaggingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).CreateTagging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_CreateTagging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).CreateTagging(ctx, req.(*CreateTaggingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateTaggingStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataLoaderServer).CreateTaggingStream(&grpc.GenericServerStream[CreateTaggingRequest, CreateTaggingStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_CreateTaggingStreamServer = grpc.BidiStreamingServer[CreateTaggingRequest, CreateTaggingStreamResponse]

func _DataLoader_GetHierarchies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetHierarchiesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataLoaderServer).GetHierarchies(m, &grpc.GenericServerStream[GetHierarchiesRequest, HierarchyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_GetHierarchiesServer = grpc.ServerStreamingServer[HierarchyResponse]

func _DataLoader_GetHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_GetHierarchy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetHierarchy(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHierarchyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).CreateHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_CreateHierarchy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).CreateHierarchy(ctx, req.(*CreateHierarchyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_GetNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetNodesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataLoaderServer).GetNodes(m, &grpc.GenericServerStream[GetNodesRequest, NodeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_GetNodesServer = grpc.ServerStreamingServer[NodeResponse]

func _DataLoader_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetNode(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_GetChildNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataLoaderServer).GetChildNodes(m, &grpc.GenericServerStream[IdRequest, ChildNodeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_GetChildNodesServer = grpc.ServerStreamingServer[ChildNodeResponse]

func _DataLoader_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_CreateNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).CreateNode(ctx, req.(*CreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateNodeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataLoaderServer).CreateNodeStream(&grpc.GenericServerStream[CreateNodeRequest, NodeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_CreateNodeStreamServer = grpc.BidiStreamingServer[CreateNodeRequest, NodeResponse]

func _DataLoader_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_DeleteNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).DeleteNode(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_GetCell_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCellRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataLoaderServer).GetCell(m, &grpc.GenericServerStream[GetCellRequest, CellResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataLoader_GetCellServer = grpc.ServerStreamingServer[CellResponse]

func _DataLoader_ResetDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).ResetDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLoader_ResetDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).ResetDatabase(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataLoader_ServiceDesc is the grpc.ServiceDesc for DataLoader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataLoader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dataloader.DataLoader",
	HandlerType: (*DataLoaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getMediaById",
			Handler:    _DataLoader_GetMediaById_Handler,
		},
		{
			MethodName: "getMediaByURI",
			Handler:    _DataLoader_GetMediaByURI_Handler,
		},
		{
			MethodName: "createMedia",
			Handler:    _DataLoader_CreateMedia_Handler,
		},
		{
			MethodName: "deleteMedia",
			Handler:    _DataLoader_DeleteMedia_Handler,
		},
		{
			MethodName: "getTagSetById",
			Handler:    _DataLoader_GetTagSetById_Handler,
		},
		{
			MethodName: "getTagSetByName",
			Handler:    _DataLoader_GetTagSetByName_Handler,
		},
		{
			MethodName: "createTagSet",
			Handler:    _DataLoader_CreateTagSet_Handler,
		},
		{
			MethodName: "getTag",
			Handler:    _DataLoader_GetTag_Handler,
		},
		{
			MethodName: "createTag",
			Handler:    _DataLoader_CreateTag_Handler,
		},
		{
			MethodName: "getMediasWithTag",
			Handler:    _DataLoader_GetMediasWithTag_Handler,
		},
		{
			MethodName: "getMediaTags",
			Handler:    _DataLoader_GetMediaTags_Handler,
		},
		{
			MethodName: "createTagging",
			Handler:    _DataLoader_CreateTagging_Handler,
		},
		{
			MethodName: "getHierarchy",
			Handler:    _DataLoader_GetHierarchy_Handler,
		},
		{
			MethodName: "createHierarchy",
			Handler:    _DataLoader_CreateHierarchy_Handler,
		},
		{
			MethodName: "getNode",
			Handler:    _DataLoader_GetNode_Handler,
		},
		{
			MethodName: "createNode",
			Handler:    _DataLoader_CreateNode_Handler,
		},
		{
			MethodName: "deleteNode",
			Handler:    _DataLoader_DeleteNode_Handler,
		},
		{
			MethodName: "resetDatabase",
			Handler:    _DataLoader_ResetDatabase_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getMedias",
			Handler:       _DataLoader_GetMedias_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "createMediaStream",
			Handler:       _DataLoader_CreateMediaStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "getTagSets",
			Handler:       _DataLoader_GetTagSets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getTags",
			Handler:       _DataLoader_GetTags_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "createTagStream",
			Handler:       _DataLoader_CreateTagStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "getTaggings",
			Handler:       _DataLoader_GetTaggings_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "createTaggingStream",
			Handler:       _DataLoader_CreateTaggingStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "getHierarchies",
			Handler:       _DataLoader_GetHierarchies_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getNodes",
			Handler:       _DataLoader_GetNodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getChildNodes",
			Handler:       _DataLoader_GetChildNodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "createNodeStream",
			Handler:       _DataLoader_CreateNodeStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "getCell",
			Handler:       _DataLoader_GetCell_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dataloader.proto",
}
