// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: dataloader.proto

package dataloader

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataLoaderClient is the client API for DataLoader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataLoaderClient interface {
	// Medias
	GetMedias(ctx context.Context, in *GetMediasRequest, opts ...grpc.CallOption) (DataLoader_GetMediasClient, error)
	GetMediaById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*MediaResponse, error)
	GetMediaByURI(ctx context.Context, in *GetMediaByURIRequest, opts ...grpc.CallOption) (*MediaResponse, error)
	CreateMedia(ctx context.Context, in *CreateMediaRequest, opts ...grpc.CallOption) (*MediaResponse, error)
	CreateMedias(ctx context.Context, opts ...grpc.CallOption) (DataLoader_CreateMediasClient, error)
	DeleteMedia(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// TagSets
	GetTagSets(ctx context.Context, in *GetTagSetsRequest, opts ...grpc.CallOption) (DataLoader_GetTagSetsClient, error)
	GetTagSetById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*TagSetResponse, error)
	GetTagSetByName(ctx context.Context, in *GetTagSetRequestByName, opts ...grpc.CallOption) (*TagSetResponse, error)
	CreateTagSet(ctx context.Context, in *CreateTagSetRequest, opts ...grpc.CallOption) (*TagSetResponse, error)
	// Tags
	GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (DataLoader_GetTagsClient, error)
	GetTag(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*TagResponse, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	CreateTagStream(ctx context.Context, opts ...grpc.CallOption) (DataLoader_CreateTagStreamClient, error)
	// Tagging
	GetTaggings(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (DataLoader_GetTaggingsClient, error)
	GetMediasWithTag(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*RepeatedIdResponse, error)
	GetMediaTags(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*RepeatedIdResponse, error)
	CreateTagging(ctx context.Context, in *CreateTaggingRequest, opts ...grpc.CallOption) (*TaggingResponse, error)
	CreateTaggingStream(ctx context.Context, opts ...grpc.CallOption) (DataLoader_CreateTaggingStreamClient, error)
	// Hierarchies
	GetHierarchies(ctx context.Context, in *GetHierarchiesRequest, opts ...grpc.CallOption) (DataLoader_GetHierarchiesClient, error)
	GetHierarchy(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*HierarchyResponse, error)
	CreateHierarchy(ctx context.Context, in *CreateHierarchyRequest, opts ...grpc.CallOption) (*HierarchyResponse, error)
	// Nodes
	GetNode(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (DataLoader_GetNodesClient, error)
	CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	CreateNodeStream(ctx context.Context, opts ...grpc.CallOption) (DataLoader_CreateNodeStreamClient, error)
	DeleteNode(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Other
	ResetDatabase(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type dataLoaderClient struct {
	cc grpc.ClientConnInterface
}

func NewDataLoaderClient(cc grpc.ClientConnInterface) DataLoaderClient {
	return &dataLoaderClient{cc}
}

func (c *dataLoaderClient) GetMedias(ctx context.Context, in *GetMediasRequest, opts ...grpc.CallOption) (DataLoader_GetMediasClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[0], "/dataloader.DataLoader/getMedias", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataLoaderGetMediasClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataLoader_GetMediasClient interface {
	Recv() (*MediaResponse, error)
	grpc.ClientStream
}

type dataLoaderGetMediasClient struct {
	grpc.ClientStream
}

func (x *dataLoaderGetMediasClient) Recv() (*MediaResponse, error) {
	m := new(MediaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataLoaderClient) GetMediaById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*MediaResponse, error) {
	out := new(MediaResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/getMediaById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) GetMediaByURI(ctx context.Context, in *GetMediaByURIRequest, opts ...grpc.CallOption) (*MediaResponse, error) {
	out := new(MediaResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/getMediaByURI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateMedia(ctx context.Context, in *CreateMediaRequest, opts ...grpc.CallOption) (*MediaResponse, error) {
	out := new(MediaResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/createMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateMedias(ctx context.Context, opts ...grpc.CallOption) (DataLoader_CreateMediasClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[1], "/dataloader.DataLoader/createMediaStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataLoaderCreateMediasClient{stream}
	return x, nil
}

type DataLoader_CreateMediasClient interface {
	Send(*CreateMediaRequest) error
	Recv() (*CreateMediaStreamResponse, error)
	grpc.ClientStream
}

type dataLoaderCreateMediasClient struct {
	grpc.ClientStream
}

func (x *dataLoaderCreateMediasClient) Send(m *CreateMediaRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataLoaderCreateMediasClient) Recv() (*CreateMediaStreamResponse, error) {
	m := new(CreateMediaStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataLoaderClient) DeleteMedia(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/deleteMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) GetTagSets(ctx context.Context, in *GetTagSetsRequest, opts ...grpc.CallOption) (DataLoader_GetTagSetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[2], "/dataloader.DataLoader/getTagSets", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataLoaderGetTagSetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataLoader_GetTagSetsClient interface {
	Recv() (*TagSetResponse, error)
	grpc.ClientStream
}

type dataLoaderGetTagSetsClient struct {
	grpc.ClientStream
}

func (x *dataLoaderGetTagSetsClient) Recv() (*TagSetResponse, error) {
	m := new(TagSetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataLoaderClient) GetTagSetById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*TagSetResponse, error) {
	out := new(TagSetResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/getTagSetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) GetTagSetByName(ctx context.Context, in *GetTagSetRequestByName, opts ...grpc.CallOption) (*TagSetResponse, error) {
	out := new(TagSetResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/getTagSetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateTagSet(ctx context.Context, in *CreateTagSetRequest, opts ...grpc.CallOption) (*TagSetResponse, error) {
	out := new(TagSetResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/createTagSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (DataLoader_GetTagsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[3], "/dataloader.DataLoader/getTags", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataLoaderGetTagsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataLoader_GetTagsClient interface {
	Recv() (*TagResponse, error)
	grpc.ClientStream
}

type dataLoaderGetTagsClient struct {
	grpc.ClientStream
}

func (x *dataLoaderGetTagsClient) Recv() (*TagResponse, error) {
	m := new(TagResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataLoaderClient) GetTag(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/getTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/createTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateTagStream(ctx context.Context, opts ...grpc.CallOption) (DataLoader_CreateTagStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[4], "/dataloader.DataLoader/createTagStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataLoaderCreateTagStreamClient{stream}
	return x, nil
}

type DataLoader_CreateTagStreamClient interface {
	Send(*CreateTagRequest) error
	Recv() (*TagResponse, error)
	grpc.ClientStream
}

type dataLoaderCreateTagStreamClient struct {
	grpc.ClientStream
}

func (x *dataLoaderCreateTagStreamClient) Send(m *CreateTagRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataLoaderCreateTagStreamClient) Recv() (*TagResponse, error) {
	m := new(TagResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataLoaderClient) GetTaggings(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (DataLoader_GetTaggingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[5], "/dataloader.DataLoader/getTaggings", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataLoaderGetTaggingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataLoader_GetTaggingsClient interface {
	Recv() (*TaggingResponse, error)
	grpc.ClientStream
}

type dataLoaderGetTaggingsClient struct {
	grpc.ClientStream
}

func (x *dataLoaderGetTaggingsClient) Recv() (*TaggingResponse, error) {
	m := new(TaggingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataLoaderClient) GetMediasWithTag(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*RepeatedIdResponse, error) {
	out := new(RepeatedIdResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/getMediasWithTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) GetMediaTags(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*RepeatedIdResponse, error) {
	out := new(RepeatedIdResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/getMediaTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateTagging(ctx context.Context, in *CreateTaggingRequest, opts ...grpc.CallOption) (*TaggingResponse, error) {
	out := new(TaggingResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/createTagging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateTaggingStream(ctx context.Context, opts ...grpc.CallOption) (DataLoader_CreateTaggingStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[6], "/dataloader.DataLoader/createTaggingStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataLoaderCreateTaggingStreamClient{stream}
	return x, nil
}

type DataLoader_CreateTaggingStreamClient interface {
	Send(*CreateTaggingRequest) error
	Recv() (*CreateTaggingStreamResponse, error)
	grpc.ClientStream
}

type dataLoaderCreateTaggingStreamClient struct {
	grpc.ClientStream
}

func (x *dataLoaderCreateTaggingStreamClient) Send(m *CreateTaggingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataLoaderCreateTaggingStreamClient) Recv() (*CreateTaggingStreamResponse, error) {
	m := new(CreateTaggingStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataLoaderClient) GetHierarchies(ctx context.Context, in *GetHierarchiesRequest, opts ...grpc.CallOption) (DataLoader_GetHierarchiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[7], "/dataloader.DataLoader/getHierarchies", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataLoaderGetHierarchiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataLoader_GetHierarchiesClient interface {
	Recv() (*HierarchyResponse, error)
	grpc.ClientStream
}

type dataLoaderGetHierarchiesClient struct {
	grpc.ClientStream
}

func (x *dataLoaderGetHierarchiesClient) Recv() (*HierarchyResponse, error) {
	m := new(HierarchyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataLoaderClient) GetHierarchy(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*HierarchyResponse, error) {
	out := new(HierarchyResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/getHierarchy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateHierarchy(ctx context.Context, in *CreateHierarchyRequest, opts ...grpc.CallOption) (*HierarchyResponse, error) {
	out := new(HierarchyResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/createHierarchy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) GetNode(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/getNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (DataLoader_GetNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[8], "/dataloader.DataLoader/getNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataLoaderGetNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataLoader_GetNodesClient interface {
	Recv() (*NodeResponse, error)
	grpc.ClientStream
}

type dataLoaderGetNodesClient struct {
	grpc.ClientStream
}

func (x *dataLoaderGetNodesClient) Recv() (*NodeResponse, error) {
	m := new(NodeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataLoaderClient) CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/createNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) CreateNodeStream(ctx context.Context, opts ...grpc.CallOption) (DataLoader_CreateNodeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataLoader_ServiceDesc.Streams[9], "/dataloader.DataLoader/createNodeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataLoaderCreateNodeStreamClient{stream}
	return x, nil
}

type DataLoader_CreateNodeStreamClient interface {
	Send(*CreateNodeRequest) error
	Recv() (*NodeResponse, error)
	grpc.ClientStream
}

type dataLoaderCreateNodeStreamClient struct {
	grpc.ClientStream
}

func (x *dataLoaderCreateNodeStreamClient) Send(m *CreateNodeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataLoaderCreateNodeStreamClient) Recv() (*NodeResponse, error) {
	m := new(NodeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataLoaderClient) DeleteNode(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/deleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLoaderClient) ResetDatabase(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/dataloader.DataLoader/resetDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataLoaderServer is the server API for DataLoader service.
// All implementations must embed UnimplementedDataLoaderServer
// for forward compatibility
type DataLoaderServer interface {
	// Medias
	GetMedias(*GetMediasRequest, DataLoader_GetMediasServer) error
	GetMediaById(context.Context, *IdRequest) (*MediaResponse, error)
	GetMediaByURI(context.Context, *GetMediaByURIRequest) (*MediaResponse, error)
	CreateMedia(context.Context, *CreateMediaRequest) (*MediaResponse, error)
	CreateMedias(DataLoader_CreateMediasServer) error
	DeleteMedia(context.Context, *IdRequest) (*StatusResponse, error)
	// TagSets
	GetTagSets(*GetTagSetsRequest, DataLoader_GetTagSetsServer) error
	GetTagSetById(context.Context, *IdRequest) (*TagSetResponse, error)
	GetTagSetByName(context.Context, *GetTagSetRequestByName) (*TagSetResponse, error)
	CreateTagSet(context.Context, *CreateTagSetRequest) (*TagSetResponse, error)
	// Tags
	GetTags(*GetTagsRequest, DataLoader_GetTagsServer) error
	GetTag(context.Context, *IdRequest) (*TagResponse, error)
	CreateTag(context.Context, *CreateTagRequest) (*TagResponse, error)
	CreateTagStream(DataLoader_CreateTagStreamServer) error
	// Tagging
	GetTaggings(*EmptyRequest, DataLoader_GetTaggingsServer) error
	GetMediasWithTag(context.Context, *IdRequest) (*RepeatedIdResponse, error)
	GetMediaTags(context.Context, *IdRequest) (*RepeatedIdResponse, error)
	CreateTagging(context.Context, *CreateTaggingRequest) (*TaggingResponse, error)
	CreateTaggingStream(DataLoader_CreateTaggingStreamServer) error
	// Hierarchies
	GetHierarchies(*GetHierarchiesRequest, DataLoader_GetHierarchiesServer) error
	GetHierarchy(context.Context, *IdRequest) (*HierarchyResponse, error)
	CreateHierarchy(context.Context, *CreateHierarchyRequest) (*HierarchyResponse, error)
	// Nodes
	GetNode(context.Context, *IdRequest) (*NodeResponse, error)
	GetNodes(*GetNodesRequest, DataLoader_GetNodesServer) error
	CreateNode(context.Context, *CreateNodeRequest) (*NodeResponse, error)
	CreateNodeStream(DataLoader_CreateNodeStreamServer) error
	DeleteNode(context.Context, *IdRequest) (*StatusResponse, error)
	// Other
	ResetDatabase(context.Context, *EmptyRequest) (*StatusResponse, error)
	mustEmbedUnimplementedDataLoaderServer()
}

// UnimplementedDataLoaderServer must be embedded to have forward compatible implementations.
type UnimplementedDataLoaderServer struct {
}

func (UnimplementedDataLoaderServer) GetMedias(*GetMediasRequest, DataLoader_GetMediasServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMedias not implemented")
}
func (UnimplementedDataLoaderServer) GetMediaById(context.Context, *IdRequest) (*MediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaById not implemented")
}
func (UnimplementedDataLoaderServer) GetMediaByURI(context.Context, *GetMediaByURIRequest) (*MediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaByURI not implemented")
}
func (UnimplementedDataLoaderServer) CreateMedia(context.Context, *CreateMediaRequest) (*MediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedia not implemented")
}
func (UnimplementedDataLoaderServer) CreateMedias(DataLoader_CreateMediasServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateMedias not implemented")
}
func (UnimplementedDataLoaderServer) DeleteMedia(context.Context, *IdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedia not implemented")
}
func (UnimplementedDataLoaderServer) GetTagSets(*GetTagSetsRequest, DataLoader_GetTagSetsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTagSets not implemented")
}
func (UnimplementedDataLoaderServer) GetTagSetById(context.Context, *IdRequest) (*TagSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagSetById not implemented")
}
func (UnimplementedDataLoaderServer) GetTagSetByName(context.Context, *GetTagSetRequestByName) (*TagSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagSetByName not implemented")
}
func (UnimplementedDataLoaderServer) CreateTagSet(context.Context, *CreateTagSetRequest) (*TagSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTagSet not implemented")
}
func (UnimplementedDataLoaderServer) GetTags(*GetTagsRequest, DataLoader_GetTagsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedDataLoaderServer) GetTag(context.Context, *IdRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (UnimplementedDataLoaderServer) CreateTag(context.Context, *CreateTagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedDataLoaderServer) CreateTagStream(DataLoader_CreateTagStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateTagStream not implemented")
}
func (UnimplementedDataLoaderServer) GetTaggings(*EmptyRequest, DataLoader_GetTaggingsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTaggings not implemented")
}
func (UnimplementedDataLoaderServer) GetMediasWithTag(context.Context, *IdRequest) (*RepeatedIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediasWithTag not implemented")
}
func (UnimplementedDataLoaderServer) GetMediaTags(context.Context, *IdRequest) (*RepeatedIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaTags not implemented")
}
func (UnimplementedDataLoaderServer) CreateTagging(context.Context, *CreateTaggingRequest) (*TaggingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTagging not implemented")
}
func (UnimplementedDataLoaderServer) CreateTaggingStream(DataLoader_CreateTaggingStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateTaggingStream not implemented")
}
func (UnimplementedDataLoaderServer) GetHierarchies(*GetHierarchiesRequest, DataLoader_GetHierarchiesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetHierarchies not implemented")
}
func (UnimplementedDataLoaderServer) GetHierarchy(context.Context, *IdRequest) (*HierarchyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHierarchy not implemented")
}
func (UnimplementedDataLoaderServer) CreateHierarchy(context.Context, *CreateHierarchyRequest) (*HierarchyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHierarchy not implemented")
}
func (UnimplementedDataLoaderServer) GetNode(context.Context, *IdRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedDataLoaderServer) GetNodes(*GetNodesRequest, DataLoader_GetNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedDataLoaderServer) CreateNode(context.Context, *CreateNodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (UnimplementedDataLoaderServer) CreateNodeStream(DataLoader_CreateNodeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateNodeStream not implemented")
}
func (UnimplementedDataLoaderServer) DeleteNode(context.Context, *IdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedDataLoaderServer) ResetDatabase(context.Context, *EmptyRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetDatabase not implemented")
}
func (UnimplementedDataLoaderServer) mustEmbedUnimplementedDataLoaderServer() {}

// UnsafeDataLoaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataLoaderServer will
// result in compilation errors.
type UnsafeDataLoaderServer interface {
	mustEmbedUnimplementedDataLoaderServer()
}

func RegisterDataLoaderServer(s grpc.ServiceRegistrar, srv DataLoaderServer) {
	s.RegisterService(&DataLoader_ServiceDesc, srv)
}

func _DataLoader_GetMedias_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMediasRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataLoaderServer).GetMedias(m, &dataLoaderGetMediasServer{stream})
}

type DataLoader_GetMediasServer interface {
	Send(*MediaResponse) error
	grpc.ServerStream
}

type dataLoaderGetMediasServer struct {
	grpc.ServerStream
}

func (x *dataLoaderGetMediasServer) Send(m *MediaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataLoader_GetMediaById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetMediaById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/getMediaById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetMediaById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_GetMediaByURI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaByURIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetMediaByURI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/getMediaByURI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetMediaByURI(ctx, req.(*GetMediaByURIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).CreateMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/createMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).CreateMedia(ctx, req.(*CreateMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateMedias_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataLoaderServer).CreateMedias(&dataLoaderCreateMediasServer{stream})
}

type DataLoader_CreateMediasServer interface {
	Send(*CreateMediaStreamResponse) error
	Recv() (*CreateMediaRequest, error)
	grpc.ServerStream
}

type dataLoaderCreateMediasServer struct {
	grpc.ServerStream
}

func (x *dataLoaderCreateMediasServer) Send(m *CreateMediaStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataLoaderCreateMediasServer) Recv() (*CreateMediaRequest, error) {
	m := new(CreateMediaRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataLoader_DeleteMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).DeleteMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/deleteMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).DeleteMedia(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_GetTagSets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTagSetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataLoaderServer).GetTagSets(m, &dataLoaderGetTagSetsServer{stream})
}

type DataLoader_GetTagSetsServer interface {
	Send(*TagSetResponse) error
	grpc.ServerStream
}

type dataLoaderGetTagSetsServer struct {
	grpc.ServerStream
}

func (x *dataLoaderGetTagSetsServer) Send(m *TagSetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataLoader_GetTagSetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetTagSetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/getTagSetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetTagSetById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_GetTagSetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagSetRequestByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetTagSetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/getTagSetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetTagSetByName(ctx, req.(*GetTagSetRequestByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateTagSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).CreateTagSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/createTagSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).CreateTagSet(ctx, req.(*CreateTagSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_GetTags_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTagsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataLoaderServer).GetTags(m, &dataLoaderGetTagsServer{stream})
}

type DataLoader_GetTagsServer interface {
	Send(*TagResponse) error
	grpc.ServerStream
}

type dataLoaderGetTagsServer struct {
	grpc.ServerStream
}

func (x *dataLoaderGetTagsServer) Send(m *TagResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataLoader_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/getTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetTag(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/createTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateTagStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataLoaderServer).CreateTagStream(&dataLoaderCreateTagStreamServer{stream})
}

type DataLoader_CreateTagStreamServer interface {
	Send(*TagResponse) error
	Recv() (*CreateTagRequest, error)
	grpc.ServerStream
}

type dataLoaderCreateTagStreamServer struct {
	grpc.ServerStream
}

func (x *dataLoaderCreateTagStreamServer) Send(m *TagResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataLoaderCreateTagStreamServer) Recv() (*CreateTagRequest, error) {
	m := new(CreateTagRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataLoader_GetTaggings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataLoaderServer).GetTaggings(m, &dataLoaderGetTaggingsServer{stream})
}

type DataLoader_GetTaggingsServer interface {
	Send(*TaggingResponse) error
	grpc.ServerStream
}

type dataLoaderGetTaggingsServer struct {
	grpc.ServerStream
}

func (x *dataLoaderGetTaggingsServer) Send(m *TaggingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataLoader_GetMediasWithTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetMediasWithTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/getMediasWithTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetMediasWithTag(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_GetMediaTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetMediaTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/getMediaTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetMediaTags(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateTagging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaggingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).CreateTagging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/createTagging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).CreateTagging(ctx, req.(*CreateTaggingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateTaggingStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataLoaderServer).CreateTaggingStream(&dataLoaderCreateTaggingStreamServer{stream})
}

type DataLoader_CreateTaggingStreamServer interface {
	Send(*CreateTaggingStreamResponse) error
	Recv() (*CreateTaggingRequest, error)
	grpc.ServerStream
}

type dataLoaderCreateTaggingStreamServer struct {
	grpc.ServerStream
}

func (x *dataLoaderCreateTaggingStreamServer) Send(m *CreateTaggingStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataLoaderCreateTaggingStreamServer) Recv() (*CreateTaggingRequest, error) {
	m := new(CreateTaggingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataLoader_GetHierarchies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetHierarchiesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataLoaderServer).GetHierarchies(m, &dataLoaderGetHierarchiesServer{stream})
}

type DataLoader_GetHierarchiesServer interface {
	Send(*HierarchyResponse) error
	grpc.ServerStream
}

type dataLoaderGetHierarchiesServer struct {
	grpc.ServerStream
}

func (x *dataLoaderGetHierarchiesServer) Send(m *HierarchyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataLoader_GetHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/getHierarchy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetHierarchy(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHierarchyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).CreateHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/createHierarchy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).CreateHierarchy(ctx, req.(*CreateHierarchyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/getNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).GetNode(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_GetNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetNodesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataLoaderServer).GetNodes(m, &dataLoaderGetNodesServer{stream})
}

type DataLoader_GetNodesServer interface {
	Send(*NodeResponse) error
	grpc.ServerStream
}

type dataLoaderGetNodesServer struct {
	grpc.ServerStream
}

func (x *dataLoaderGetNodesServer) Send(m *NodeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataLoader_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/createNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).CreateNode(ctx, req.(*CreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_CreateNodeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataLoaderServer).CreateNodeStream(&dataLoaderCreateNodeStreamServer{stream})
}

type DataLoader_CreateNodeStreamServer interface {
	Send(*NodeResponse) error
	Recv() (*CreateNodeRequest, error)
	grpc.ServerStream
}

type dataLoaderCreateNodeStreamServer struct {
	grpc.ServerStream
}

func (x *dataLoaderCreateNodeStreamServer) Send(m *NodeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataLoaderCreateNodeStreamServer) Recv() (*CreateNodeRequest, error) {
	m := new(CreateNodeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataLoader_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/deleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).DeleteNode(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLoader_ResetDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).ResetDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataloader.DataLoader/resetDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).ResetDatabase(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataLoader_ServiceDesc is the grpc.ServiceDesc for DataLoader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataLoader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dataloader.DataLoader",
	HandlerType: (*DataLoaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getMediaById",
			Handler:    _DataLoader_GetMediaById_Handler,
		},
		{
			MethodName: "getMediaByURI",
			Handler:    _DataLoader_GetMediaByURI_Handler,
		},
		{
			MethodName: "createMedia",
			Handler:    _DataLoader_CreateMedia_Handler,
		},
		{
			MethodName: "deleteMedia",
			Handler:    _DataLoader_DeleteMedia_Handler,
		},
		{
			MethodName: "getTagSetById",
			Handler:    _DataLoader_GetTagSetById_Handler,
		},
		{
			MethodName: "getTagSetByName",
			Handler:    _DataLoader_GetTagSetByName_Handler,
		},
		{
			MethodName: "createTagSet",
			Handler:    _DataLoader_CreateTagSet_Handler,
		},
		{
			MethodName: "getTag",
			Handler:    _DataLoader_GetTag_Handler,
		},
		{
			MethodName: "createTag",
			Handler:    _DataLoader_CreateTag_Handler,
		},
		{
			MethodName: "getMediasWithTag",
			Handler:    _DataLoader_GetMediasWithTag_Handler,
		},
		{
			MethodName: "getMediaTags",
			Handler:    _DataLoader_GetMediaTags_Handler,
		},
		{
			MethodName: "createTagging",
			Handler:    _DataLoader_CreateTagging_Handler,
		},
		{
			MethodName: "getHierarchy",
			Handler:    _DataLoader_GetHierarchy_Handler,
		},
		{
			MethodName: "createHierarchy",
			Handler:    _DataLoader_CreateHierarchy_Handler,
		},
		{
			MethodName: "getNode",
			Handler:    _DataLoader_GetNode_Handler,
		},
		{
			MethodName: "createNode",
			Handler:    _DataLoader_CreateNode_Handler,
		},
		{
			MethodName: "deleteNode",
			Handler:    _DataLoader_DeleteNode_Handler,
		},
		{
			MethodName: "resetDatabase",
			Handler:    _DataLoader_ResetDatabase_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getMedias",
			Handler:       _DataLoader_GetMedias_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "createMediaStream",
			Handler:       _DataLoader_CreateMedias_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "getTagSets",
			Handler:       _DataLoader_GetTagSets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getTags",
			Handler:       _DataLoader_GetTags_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "createTagStream",
			Handler:       _DataLoader_CreateTagStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "getTaggings",
			Handler:       _DataLoader_GetTaggings_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "createTaggingStream",
			Handler:       _DataLoader_CreateTaggingStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "getHierarchies",
			Handler:       _DataLoader_GetHierarchies_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getNodes",
			Handler:       _DataLoader_GetNodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "createNodeStream",
			Handler:       _DataLoader_CreateNodeStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dataloader.proto",
}