// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: media_downloader.proto

package media_downloader

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MediaDownloader_RequestMedia_FullMethodName = "/MediaDownloader/RequestMedia"
	MediaDownloader_ReleaseMedia_FullMethodName = "/MediaDownloader/ReleaseMedia"
)

// MediaDownloaderClient is the client API for MediaDownloader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaDownloaderClient interface {
	RequestMedia(ctx context.Context, in *RequestMediaRequest, opts ...grpc.CallOption) (*RequestMediaResponse, error)
	ReleaseMedia(ctx context.Context, in *ReleaseMediaRequest, opts ...grpc.CallOption) (*ReleaseMediaResponse, error)
}

type mediaDownloaderClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaDownloaderClient(cc grpc.ClientConnInterface) MediaDownloaderClient {
	return &mediaDownloaderClient{cc}
}

func (c *mediaDownloaderClient) RequestMedia(ctx context.Context, in *RequestMediaRequest, opts ...grpc.CallOption) (*RequestMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestMediaResponse)
	err := c.cc.Invoke(ctx, MediaDownloader_RequestMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaDownloaderClient) ReleaseMedia(ctx context.Context, in *ReleaseMediaRequest, opts ...grpc.CallOption) (*ReleaseMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseMediaResponse)
	err := c.cc.Invoke(ctx, MediaDownloader_ReleaseMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaDownloaderServer is the server API for MediaDownloader service.
// All implementations must embed UnimplementedMediaDownloaderServer
// for forward compatibility.
type MediaDownloaderServer interface {
	RequestMedia(context.Context, *RequestMediaRequest) (*RequestMediaResponse, error)
	ReleaseMedia(context.Context, *ReleaseMediaRequest) (*ReleaseMediaResponse, error)
	mustEmbedUnimplementedMediaDownloaderServer()
}

// UnimplementedMediaDownloaderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMediaDownloaderServer struct{}

func (UnimplementedMediaDownloaderServer) RequestMedia(context.Context, *RequestMediaRequest) (*RequestMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMedia not implemented")
}
func (UnimplementedMediaDownloaderServer) ReleaseMedia(context.Context, *ReleaseMediaRequest) (*ReleaseMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseMedia not implemented")
}
func (UnimplementedMediaDownloaderServer) mustEmbedUnimplementedMediaDownloaderServer() {}
func (UnimplementedMediaDownloaderServer) testEmbeddedByValue()                         {}

// UnsafeMediaDownloaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaDownloaderServer will
// result in compilation errors.
type UnsafeMediaDownloaderServer interface {
	mustEmbedUnimplementedMediaDownloaderServer()
}

func RegisterMediaDownloaderServer(s grpc.ServiceRegistrar, srv MediaDownloaderServer) {
	// If the following call pancis, it indicates UnimplementedMediaDownloaderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MediaDownloader_ServiceDesc, srv)
}

func _MediaDownloader_RequestMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaDownloaderServer).RequestMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaDownloader_RequestMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaDownloaderServer).RequestMedia(ctx, req.(*RequestMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaDownloader_ReleaseMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaDownloaderServer).ReleaseMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaDownloader_ReleaseMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaDownloaderServer).ReleaseMedia(ctx, req.(*ReleaseMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaDownloader_ServiceDesc is the grpc.ServiceDesc for MediaDownloader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaDownloader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MediaDownloader",
	HandlerType: (*MediaDownloaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestMedia",
			Handler:    _MediaDownloader_RequestMedia_Handler,
		},
		{
			MethodName: "ReleaseMedia",
			Handler:    _MediaDownloader_ReleaseMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "media_downloader.proto",
}
