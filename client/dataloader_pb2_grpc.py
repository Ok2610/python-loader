# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import dataloader_pb2 as dataloader__pb2

GRPC_GENERATED_VERSION = '1.72.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in dataloader_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DataLoaderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getMedias = channel.unary_stream(
                '/dataloader.DataLoader/getMedias',
                request_serializer=dataloader__pb2.GetMediasRequest.SerializeToString,
                response_deserializer=dataloader__pb2.StreamingMediaResponse.FromString,
                _registered_method=True)
        self.getMediaById = channel.unary_unary(
                '/dataloader.DataLoader/getMediaById',
                request_serializer=dataloader__pb2.IdRequest.SerializeToString,
                response_deserializer=dataloader__pb2.Media.FromString,
                _registered_method=True)
        self.getMediaByURI = channel.unary_unary(
                '/dataloader.DataLoader/getMediaByURI',
                request_serializer=dataloader__pb2.GetMediaByURIRequest.SerializeToString,
                response_deserializer=dataloader__pb2.Media.FromString,
                _registered_method=True)
        self.createMedia = channel.unary_unary(
                '/dataloader.DataLoader/createMedia',
                request_serializer=dataloader__pb2.Media.SerializeToString,
                response_deserializer=dataloader__pb2.Media.FromString,
                _registered_method=True)
        self.createMediaStream = channel.stream_stream(
                '/dataloader.DataLoader/createMediaStream',
                request_serializer=dataloader__pb2.Media.SerializeToString,
                response_deserializer=dataloader__pb2.CreateMediaStreamResponse.FromString,
                _registered_method=True)
        self.deleteMedia = channel.unary_unary(
                '/dataloader.DataLoader/deleteMedia',
                request_serializer=dataloader__pb2.IdRequest.SerializeToString,
                response_deserializer=dataloader__pb2.Empty.FromString,
                _registered_method=True)
        self.getTagSets = channel.unary_stream(
                '/dataloader.DataLoader/getTagSets',
                request_serializer=dataloader__pb2.GetTagSetsRequest.SerializeToString,
                response_deserializer=dataloader__pb2.StreamingTagSetResponse.FromString,
                _registered_method=True)
        self.getTagSetById = channel.unary_unary(
                '/dataloader.DataLoader/getTagSetById',
                request_serializer=dataloader__pb2.IdRequest.SerializeToString,
                response_deserializer=dataloader__pb2.TagSet.FromString,
                _registered_method=True)
        self.getTagSetByName = channel.unary_unary(
                '/dataloader.DataLoader/getTagSetByName',
                request_serializer=dataloader__pb2.GetTagSetRequestByName.SerializeToString,
                response_deserializer=dataloader__pb2.TagSet.FromString,
                _registered_method=True)
        self.createTagSet = channel.unary_unary(
                '/dataloader.DataLoader/createTagSet',
                request_serializer=dataloader__pb2.CreateTagSetRequest.SerializeToString,
                response_deserializer=dataloader__pb2.TagSet.FromString,
                _registered_method=True)
        self.getTags = channel.unary_stream(
                '/dataloader.DataLoader/getTags',
                request_serializer=dataloader__pb2.GetTagsRequest.SerializeToString,
                response_deserializer=dataloader__pb2.StreamingTagResponse.FromString,
                _registered_method=True)
        self.getTag = channel.unary_unary(
                '/dataloader.DataLoader/getTag',
                request_serializer=dataloader__pb2.IdRequest.SerializeToString,
                response_deserializer=dataloader__pb2.Tag.FromString,
                _registered_method=True)
        self.createTag = channel.unary_unary(
                '/dataloader.DataLoader/createTag',
                request_serializer=dataloader__pb2.CreateTagRequest.SerializeToString,
                response_deserializer=dataloader__pb2.Tag.FromString,
                _registered_method=True)
        self.createTagStream = channel.stream_stream(
                '/dataloader.DataLoader/createTagStream',
                request_serializer=dataloader__pb2.CreateTagStreamRequest.SerializeToString,
                response_deserializer=dataloader__pb2.CreateTagStreamResponse.FromString,
                _registered_method=True)
        self.changeTagName = channel.unary_unary(
                '/dataloader.DataLoader/changeTagName',
                request_serializer=dataloader__pb2.ChangeTagNameRequest.SerializeToString,
                response_deserializer=dataloader__pb2.Empty.FromString,
                _registered_method=True)
        self.getTaggings = channel.unary_stream(
                '/dataloader.DataLoader/getTaggings',
                request_serializer=dataloader__pb2.Empty.SerializeToString,
                response_deserializer=dataloader__pb2.StreamingTaggingResponse.FromString,
                _registered_method=True)
        self.getMediasWithTag = channel.unary_unary(
                '/dataloader.DataLoader/getMediasWithTag',
                request_serializer=dataloader__pb2.IdRequest.SerializeToString,
                response_deserializer=dataloader__pb2.RepeatedIdResponse.FromString,
                _registered_method=True)
        self.getMediaTags = channel.unary_unary(
                '/dataloader.DataLoader/getMediaTags',
                request_serializer=dataloader__pb2.IdRequest.SerializeToString,
                response_deserializer=dataloader__pb2.RepeatedIdResponse.FromString,
                _registered_method=True)
        self.createTagging = channel.unary_unary(
                '/dataloader.DataLoader/createTagging',
                request_serializer=dataloader__pb2.CreateTaggingRequest.SerializeToString,
                response_deserializer=dataloader__pb2.Tagging.FromString,
                _registered_method=True)
        self.createTaggingStream = channel.stream_stream(
                '/dataloader.DataLoader/createTaggingStream',
                request_serializer=dataloader__pb2.CreateTaggingRequest.SerializeToString,
                response_deserializer=dataloader__pb2.CreateTaggingStreamResponse.FromString,
                _registered_method=True)
        self.changeTagging = channel.unary_unary(
                '/dataloader.DataLoader/changeTagging',
                request_serializer=dataloader__pb2.ChangeTaggingRequest.SerializeToString,
                response_deserializer=dataloader__pb2.Empty.FromString,
                _registered_method=True)
        self.getHierarchies = channel.unary_stream(
                '/dataloader.DataLoader/getHierarchies',
                request_serializer=dataloader__pb2.GetHierarchiesRequest.SerializeToString,
                response_deserializer=dataloader__pb2.StreamingHierarchyResponse.FromString,
                _registered_method=True)
        self.getHierarchy = channel.unary_unary(
                '/dataloader.DataLoader/getHierarchy',
                request_serializer=dataloader__pb2.IdRequest.SerializeToString,
                response_deserializer=dataloader__pb2.Hierarchy.FromString,
                _registered_method=True)
        self.createHierarchy = channel.unary_unary(
                '/dataloader.DataLoader/createHierarchy',
                request_serializer=dataloader__pb2.CreateHierarchyRequest.SerializeToString,
                response_deserializer=dataloader__pb2.Hierarchy.FromString,
                _registered_method=True)
        self.getNodes = channel.unary_stream(
                '/dataloader.DataLoader/getNodes',
                request_serializer=dataloader__pb2.GetNodesRequest.SerializeToString,
                response_deserializer=dataloader__pb2.StreamingNodeResponse.FromString,
                _registered_method=True)
        self.getNode = channel.unary_unary(
                '/dataloader.DataLoader/getNode',
                request_serializer=dataloader__pb2.IdRequest.SerializeToString,
                response_deserializer=dataloader__pb2.Node.FromString,
                _registered_method=True)
        self.createNode = channel.unary_unary(
                '/dataloader.DataLoader/createNode',
                request_serializer=dataloader__pb2.CreateNodeRequest.SerializeToString,
                response_deserializer=dataloader__pb2.Node.FromString,
                _registered_method=True)
        self.createNodeStream = channel.stream_stream(
                '/dataloader.DataLoader/createNodeStream',
                request_serializer=dataloader__pb2.CreateNodeRequest.SerializeToString,
                response_deserializer=dataloader__pb2.StreamingNodeResponse.FromString,
                _registered_method=True)
        self.deleteNode = channel.unary_unary(
                '/dataloader.DataLoader/deleteNode',
                request_serializer=dataloader__pb2.IdRequest.SerializeToString,
                response_deserializer=dataloader__pb2.Empty.FromString,
                _registered_method=True)
        self.resetDatabase = channel.unary_unary(
                '/dataloader.DataLoader/resetDatabase',
                request_serializer=dataloader__pb2.Empty.SerializeToString,
                response_deserializer=dataloader__pb2.Empty.FromString,
                _registered_method=True)


class DataLoaderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getMedias(self, request, context):
        """-------------------------- Medias
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMediaById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMediaByURI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createMedia(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createMediaStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteMedia(self, request, context):
        """Create multiple medias at the same time in batches, returns amount added/error messages when a batch is added
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTagSets(self, request, context):
        """-------------------------- TagSets
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTagSetById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTagSetByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createTagSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTags(self, request, context):
        """-------------------------- Tags
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createTagStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def changeTagName(self, request, context):
        """Create multiple tags using batches of INSERT queries
        Returns a map of the given IDs to the created IDs (used for JSON imports)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTaggings(self, request, context):
        """-------------------------- Taggings
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMediasWithTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMediaTags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createTagging(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createTaggingStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def changeTagging(self, request, context):
        """Create multiple taggings using batches of INSERT queries
        Returns the amount added at each batch addition (similiar behaviour as in createMediaStream)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getHierarchies(self, request, context):
        """-------------------------- Hierarchies
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getHierarchy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createHierarchy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNodes(self, request, context):
        """or get it if already existent

        -------------------------- Nodes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createNodeStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resetDatabase(self, request, context):
        """Other
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataLoaderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getMedias': grpc.unary_stream_rpc_method_handler(
                    servicer.getMedias,
                    request_deserializer=dataloader__pb2.GetMediasRequest.FromString,
                    response_serializer=dataloader__pb2.StreamingMediaResponse.SerializeToString,
            ),
            'getMediaById': grpc.unary_unary_rpc_method_handler(
                    servicer.getMediaById,
                    request_deserializer=dataloader__pb2.IdRequest.FromString,
                    response_serializer=dataloader__pb2.Media.SerializeToString,
            ),
            'getMediaByURI': grpc.unary_unary_rpc_method_handler(
                    servicer.getMediaByURI,
                    request_deserializer=dataloader__pb2.GetMediaByURIRequest.FromString,
                    response_serializer=dataloader__pb2.Media.SerializeToString,
            ),
            'createMedia': grpc.unary_unary_rpc_method_handler(
                    servicer.createMedia,
                    request_deserializer=dataloader__pb2.Media.FromString,
                    response_serializer=dataloader__pb2.Media.SerializeToString,
            ),
            'createMediaStream': grpc.stream_stream_rpc_method_handler(
                    servicer.createMediaStream,
                    request_deserializer=dataloader__pb2.Media.FromString,
                    response_serializer=dataloader__pb2.CreateMediaStreamResponse.SerializeToString,
            ),
            'deleteMedia': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteMedia,
                    request_deserializer=dataloader__pb2.IdRequest.FromString,
                    response_serializer=dataloader__pb2.Empty.SerializeToString,
            ),
            'getTagSets': grpc.unary_stream_rpc_method_handler(
                    servicer.getTagSets,
                    request_deserializer=dataloader__pb2.GetTagSetsRequest.FromString,
                    response_serializer=dataloader__pb2.StreamingTagSetResponse.SerializeToString,
            ),
            'getTagSetById': grpc.unary_unary_rpc_method_handler(
                    servicer.getTagSetById,
                    request_deserializer=dataloader__pb2.IdRequest.FromString,
                    response_serializer=dataloader__pb2.TagSet.SerializeToString,
            ),
            'getTagSetByName': grpc.unary_unary_rpc_method_handler(
                    servicer.getTagSetByName,
                    request_deserializer=dataloader__pb2.GetTagSetRequestByName.FromString,
                    response_serializer=dataloader__pb2.TagSet.SerializeToString,
            ),
            'createTagSet': grpc.unary_unary_rpc_method_handler(
                    servicer.createTagSet,
                    request_deserializer=dataloader__pb2.CreateTagSetRequest.FromString,
                    response_serializer=dataloader__pb2.TagSet.SerializeToString,
            ),
            'getTags': grpc.unary_stream_rpc_method_handler(
                    servicer.getTags,
                    request_deserializer=dataloader__pb2.GetTagsRequest.FromString,
                    response_serializer=dataloader__pb2.StreamingTagResponse.SerializeToString,
            ),
            'getTag': grpc.unary_unary_rpc_method_handler(
                    servicer.getTag,
                    request_deserializer=dataloader__pb2.IdRequest.FromString,
                    response_serializer=dataloader__pb2.Tag.SerializeToString,
            ),
            'createTag': grpc.unary_unary_rpc_method_handler(
                    servicer.createTag,
                    request_deserializer=dataloader__pb2.CreateTagRequest.FromString,
                    response_serializer=dataloader__pb2.Tag.SerializeToString,
            ),
            'createTagStream': grpc.stream_stream_rpc_method_handler(
                    servicer.createTagStream,
                    request_deserializer=dataloader__pb2.CreateTagStreamRequest.FromString,
                    response_serializer=dataloader__pb2.CreateTagStreamResponse.SerializeToString,
            ),
            'changeTagName': grpc.unary_unary_rpc_method_handler(
                    servicer.changeTagName,
                    request_deserializer=dataloader__pb2.ChangeTagNameRequest.FromString,
                    response_serializer=dataloader__pb2.Empty.SerializeToString,
            ),
            'getTaggings': grpc.unary_stream_rpc_method_handler(
                    servicer.getTaggings,
                    request_deserializer=dataloader__pb2.Empty.FromString,
                    response_serializer=dataloader__pb2.StreamingTaggingResponse.SerializeToString,
            ),
            'getMediasWithTag': grpc.unary_unary_rpc_method_handler(
                    servicer.getMediasWithTag,
                    request_deserializer=dataloader__pb2.IdRequest.FromString,
                    response_serializer=dataloader__pb2.RepeatedIdResponse.SerializeToString,
            ),
            'getMediaTags': grpc.unary_unary_rpc_method_handler(
                    servicer.getMediaTags,
                    request_deserializer=dataloader__pb2.IdRequest.FromString,
                    response_serializer=dataloader__pb2.RepeatedIdResponse.SerializeToString,
            ),
            'createTagging': grpc.unary_unary_rpc_method_handler(
                    servicer.createTagging,
                    request_deserializer=dataloader__pb2.CreateTaggingRequest.FromString,
                    response_serializer=dataloader__pb2.Tagging.SerializeToString,
            ),
            'createTaggingStream': grpc.stream_stream_rpc_method_handler(
                    servicer.createTaggingStream,
                    request_deserializer=dataloader__pb2.CreateTaggingRequest.FromString,
                    response_serializer=dataloader__pb2.CreateTaggingStreamResponse.SerializeToString,
            ),
            'changeTagging': grpc.unary_unary_rpc_method_handler(
                    servicer.changeTagging,
                    request_deserializer=dataloader__pb2.ChangeTaggingRequest.FromString,
                    response_serializer=dataloader__pb2.Empty.SerializeToString,
            ),
            'getHierarchies': grpc.unary_stream_rpc_method_handler(
                    servicer.getHierarchies,
                    request_deserializer=dataloader__pb2.GetHierarchiesRequest.FromString,
                    response_serializer=dataloader__pb2.StreamingHierarchyResponse.SerializeToString,
            ),
            'getHierarchy': grpc.unary_unary_rpc_method_handler(
                    servicer.getHierarchy,
                    request_deserializer=dataloader__pb2.IdRequest.FromString,
                    response_serializer=dataloader__pb2.Hierarchy.SerializeToString,
            ),
            'createHierarchy': grpc.unary_unary_rpc_method_handler(
                    servicer.createHierarchy,
                    request_deserializer=dataloader__pb2.CreateHierarchyRequest.FromString,
                    response_serializer=dataloader__pb2.Hierarchy.SerializeToString,
            ),
            'getNodes': grpc.unary_stream_rpc_method_handler(
                    servicer.getNodes,
                    request_deserializer=dataloader__pb2.GetNodesRequest.FromString,
                    response_serializer=dataloader__pb2.StreamingNodeResponse.SerializeToString,
            ),
            'getNode': grpc.unary_unary_rpc_method_handler(
                    servicer.getNode,
                    request_deserializer=dataloader__pb2.IdRequest.FromString,
                    response_serializer=dataloader__pb2.Node.SerializeToString,
            ),
            'createNode': grpc.unary_unary_rpc_method_handler(
                    servicer.createNode,
                    request_deserializer=dataloader__pb2.CreateNodeRequest.FromString,
                    response_serializer=dataloader__pb2.Node.SerializeToString,
            ),
            'createNodeStream': grpc.stream_stream_rpc_method_handler(
                    servicer.createNodeStream,
                    request_deserializer=dataloader__pb2.CreateNodeRequest.FromString,
                    response_serializer=dataloader__pb2.StreamingNodeResponse.SerializeToString,
            ),
            'deleteNode': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteNode,
                    request_deserializer=dataloader__pb2.IdRequest.FromString,
                    response_serializer=dataloader__pb2.Empty.SerializeToString,
            ),
            'resetDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.resetDatabase,
                    request_deserializer=dataloader__pb2.Empty.FromString,
                    response_serializer=dataloader__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dataloader.DataLoader', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dataloader.DataLoader', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataLoader(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getMedias(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/dataloader.DataLoader/getMedias',
            dataloader__pb2.GetMediasRequest.SerializeToString,
            dataloader__pb2.StreamingMediaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getMediaById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/getMediaById',
            dataloader__pb2.IdRequest.SerializeToString,
            dataloader__pb2.Media.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getMediaByURI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/getMediaByURI',
            dataloader__pb2.GetMediaByURIRequest.SerializeToString,
            dataloader__pb2.Media.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def createMedia(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/createMedia',
            dataloader__pb2.Media.SerializeToString,
            dataloader__pb2.Media.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def createMediaStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/dataloader.DataLoader/createMediaStream',
            dataloader__pb2.Media.SerializeToString,
            dataloader__pb2.CreateMediaStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteMedia(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/deleteMedia',
            dataloader__pb2.IdRequest.SerializeToString,
            dataloader__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTagSets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/dataloader.DataLoader/getTagSets',
            dataloader__pb2.GetTagSetsRequest.SerializeToString,
            dataloader__pb2.StreamingTagSetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTagSetById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/getTagSetById',
            dataloader__pb2.IdRequest.SerializeToString,
            dataloader__pb2.TagSet.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTagSetByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/getTagSetByName',
            dataloader__pb2.GetTagSetRequestByName.SerializeToString,
            dataloader__pb2.TagSet.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def createTagSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/createTagSet',
            dataloader__pb2.CreateTagSetRequest.SerializeToString,
            dataloader__pb2.TagSet.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/dataloader.DataLoader/getTags',
            dataloader__pb2.GetTagsRequest.SerializeToString,
            dataloader__pb2.StreamingTagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/getTag',
            dataloader__pb2.IdRequest.SerializeToString,
            dataloader__pb2.Tag.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def createTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/createTag',
            dataloader__pb2.CreateTagRequest.SerializeToString,
            dataloader__pb2.Tag.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def createTagStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/dataloader.DataLoader/createTagStream',
            dataloader__pb2.CreateTagStreamRequest.SerializeToString,
            dataloader__pb2.CreateTagStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def changeTagName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/changeTagName',
            dataloader__pb2.ChangeTagNameRequest.SerializeToString,
            dataloader__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTaggings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/dataloader.DataLoader/getTaggings',
            dataloader__pb2.Empty.SerializeToString,
            dataloader__pb2.StreamingTaggingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getMediasWithTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/getMediasWithTag',
            dataloader__pb2.IdRequest.SerializeToString,
            dataloader__pb2.RepeatedIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getMediaTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/getMediaTags',
            dataloader__pb2.IdRequest.SerializeToString,
            dataloader__pb2.RepeatedIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def createTagging(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/createTagging',
            dataloader__pb2.CreateTaggingRequest.SerializeToString,
            dataloader__pb2.Tagging.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def createTaggingStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/dataloader.DataLoader/createTaggingStream',
            dataloader__pb2.CreateTaggingRequest.SerializeToString,
            dataloader__pb2.CreateTaggingStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def changeTagging(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/changeTagging',
            dataloader__pb2.ChangeTaggingRequest.SerializeToString,
            dataloader__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getHierarchies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/dataloader.DataLoader/getHierarchies',
            dataloader__pb2.GetHierarchiesRequest.SerializeToString,
            dataloader__pb2.StreamingHierarchyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getHierarchy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/getHierarchy',
            dataloader__pb2.IdRequest.SerializeToString,
            dataloader__pb2.Hierarchy.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def createHierarchy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/createHierarchy',
            dataloader__pb2.CreateHierarchyRequest.SerializeToString,
            dataloader__pb2.Hierarchy.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/dataloader.DataLoader/getNodes',
            dataloader__pb2.GetNodesRequest.SerializeToString,
            dataloader__pb2.StreamingNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/getNode',
            dataloader__pb2.IdRequest.SerializeToString,
            dataloader__pb2.Node.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def createNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/createNode',
            dataloader__pb2.CreateNodeRequest.SerializeToString,
            dataloader__pb2.Node.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def createNodeStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/dataloader.DataLoader/createNodeStream',
            dataloader__pb2.CreateNodeRequest.SerializeToString,
            dataloader__pb2.StreamingNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/deleteNode',
            dataloader__pb2.IdRequest.SerializeToString,
            dataloader__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def resetDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataloader.DataLoader/resetDatabase',
            dataloader__pb2.Empty.SerializeToString,
            dataloader__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
